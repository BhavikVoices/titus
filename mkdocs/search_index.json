{
    "docs": [
        {
            "location": "/", 
            "text": "Titus", 
            "title": "Introduction"
        }, 
        {
            "location": "/#titus", 
            "text": "", 
            "title": "Titus"
        }, 
        {
            "location": "/build/", 
            "text": "Agent\n\n\nmkdir -p $GOPATH/src/github.com/Netflix\ncd $GOPATH/src/github.com/Netflix\ngit clone https://github.com/Netflix/titus-agent.git\ncd titus-agent\nmake build\n./gradlew clean buildDeb\n\n\n\n\nVPC Driver\n\n\nmkdir -p $GOPATH/src/github.com/Netflix\ncd $GOPATH/src/github.com/Netflix\ngit clone https://github.com/Netflix/titus-vpc-driver.git\ncd titus-vpc-driver\ngo build\n./gradlew clean buildDeb\n\n\n\n\nMetadata Service\n\n\nmkdir -p $GOPATH/src/github.com/Netflix\ncd $GOPATH/src/github.com/Netflix\ngit clone https://github.com/Netflix/titus-metadata-service.git\ncd titus-metadata-service\nmake build\n./gradlew clean buildDeb\n\n\n\n\nThis will produce product three deb files under build/distributions", 
            "title": "Building the Code"
        }, 
        {
            "location": "/build/#agent", 
            "text": "mkdir -p $GOPATH/src/github.com/Netflix\ncd $GOPATH/src/github.com/Netflix\ngit clone https://github.com/Netflix/titus-agent.git\ncd titus-agent\nmake build\n./gradlew clean buildDeb", 
            "title": "Agent"
        }, 
        {
            "location": "/build/#vpc-driver", 
            "text": "mkdir -p $GOPATH/src/github.com/Netflix\ncd $GOPATH/src/github.com/Netflix\ngit clone https://github.com/Netflix/titus-vpc-driver.git\ncd titus-vpc-driver\ngo build\n./gradlew clean buildDeb", 
            "title": "VPC Driver"
        }, 
        {
            "location": "/build/#metadata-service", 
            "text": "mkdir -p $GOPATH/src/github.com/Netflix\ncd $GOPATH/src/github.com/Netflix\ngit clone https://github.com/Netflix/titus-metadata-service.git\ncd titus-metadata-service\nmake build\n./gradlew clean buildDeb  This will produce product three deb files under build/distributions", 
            "title": "Metadata Service"
        }, 
        {
            "location": "/install/prereqs/", 
            "text": "Required\n\n\nLinux\n\n\nWe currently run our agents on Ubuntu Xenial (16.04.2) with kernel 4.9.34 with\npatches for EFS. Until Titus open source supports EFS, it is likely that Xenial\nand a 4.9 kernel is sufficient.\n\n\nWe run all other tiers of Titus on Trusty.\n\n\nMesos and Zookeeper\n\n\n\n\nZookeeper 3.4.8 (with Exhibitor 1.5.5)\n\n\nMesos 1.0.1\n\n\n\n\nLinks\n- IPOFMESOS:5050\n- IPOFMESOS:5050/slaves\n\n\nSpinnaker\n\n\nWe deploy Titus via Spinnaker to an EC2 cloud provider. Eventually we may\nrelease these pipelines, but for now we suggest direct deployments using\nthe AWS EC2 console.\n\n\nDocker Registry\n\n\nWe operate a docker registry based on Docker Distribution. We have tested with\nDockerhub and suggest this or the EC2 Container Registry Service (ECR).\n\n\nAWS Configuration\n\n\n\n\nIAM Role and security group for Titus\n\n\nTODO: specify what is required, for now tested with wide open security group\n  and \n*\n IAM role. \n\n\nIAM Role and security group for app container\n\n\nTODO: Need to specify a test sec group and IAM role\n\n\n\n\nOptional\n\n\nWe use Cassandra as our persistence store for Titus master. For OSS, we\ncurrent suggest the in-memory store.\n\n\nWe have integration with Eureka to disable agents and monitor health. For now,\nthis is not part of the OSS implementation.\n\n\nWe write all task state updates to Elastic Search for operational insight. For\nnow, this is not part of the OSS implementation.\n\n\nWe use Edda to understand which ASG's are available in Titus. For now, this is\nnot part of the OSS implementation.", 
            "title": "Prereqs"
        }, 
        {
            "location": "/install/prereqs/#required", 
            "text": "", 
            "title": "Required"
        }, 
        {
            "location": "/install/prereqs/#linux", 
            "text": "We currently run our agents on Ubuntu Xenial (16.04.2) with kernel 4.9.34 with\npatches for EFS. Until Titus open source supports EFS, it is likely that Xenial\nand a 4.9 kernel is sufficient.  We run all other tiers of Titus on Trusty.", 
            "title": "Linux"
        }, 
        {
            "location": "/install/prereqs/#mesos-and-zookeeper", 
            "text": "Zookeeper 3.4.8 (with Exhibitor 1.5.5)  Mesos 1.0.1   Links\n- IPOFMESOS:5050\n- IPOFMESOS:5050/slaves", 
            "title": "Mesos and Zookeeper"
        }, 
        {
            "location": "/install/prereqs/#spinnaker", 
            "text": "We deploy Titus via Spinnaker to an EC2 cloud provider. Eventually we may\nrelease these pipelines, but for now we suggest direct deployments using\nthe AWS EC2 console.", 
            "title": "Spinnaker"
        }, 
        {
            "location": "/install/prereqs/#docker-registry", 
            "text": "We operate a docker registry based on Docker Distribution. We have tested with\nDockerhub and suggest this or the EC2 Container Registry Service (ECR).", 
            "title": "Docker Registry"
        }, 
        {
            "location": "/install/prereqs/#aws-configuration", 
            "text": "IAM Role and security group for Titus  TODO: specify what is required, for now tested with wide open security group\n  and  *  IAM role.   IAM Role and security group for app container  TODO: Need to specify a test sec group and IAM role", 
            "title": "AWS Configuration"
        }, 
        {
            "location": "/install/prereqs/#optional", 
            "text": "We use Cassandra as our persistence store for Titus master. For OSS, we\ncurrent suggest the in-memory store.  We have integration with Eureka to disable agents and monitor health. For now,\nthis is not part of the OSS implementation.  We write all task state updates to Elastic Search for operational insight. For\nnow, this is not part of the OSS implementation.  We use Edda to understand which ASG's are available in Titus. For now, this is\nnot part of the OSS implementation.", 
            "title": "Optional"
        }, 
        {
            "location": "/install/master/", 
            "text": "Master\n\n\nRun as root\n\n\n\n\ninstall java8\n\n\nsudo apt-get update\n\n\nsudo apt-get install openjdk-8-jdk\n\n\ninstall mesos\n\n\nCopy \ntitus-server-master/build/distributions/titus-server-master\nversion\n.deb\n to server\n\n\nRun \ndpkg -i titus-server-master\nversion\n.deb\n to install the debian\n\n\n\n\nRun as Ubuntu user\n\n\n\n\nCreate \n~/titus.properties\n with the properties:\n\n\n\n\nmantis.master.apiport=7100\nmantis.master.apiProxyPort=7001\nmantis.master.grpcServer.port=7104\n\nmantis.zookeeper.connectString=\nzookeeperIp\n\nmantis.zookeeper.root=/titus/main\n\nmesos.master.location=\nmesosMasterIp\n:\nmesosMasterPort\n\n\ntitus.master.capacityManagement.instanceTypes.0.name=DEFAULT\ntitus.master.capacityManagement.instanceTypes.0.minSize=1\n\n# Critical tier (0)\ntitus.master.capacityManagement.tiers.0.instanceTypes=m4.4xlarge\ntitus.master.capacityManagement.tiers.0.buffer=0.3\n\n# Flex tier (1)\ntitus.master.capacityManagement.tiers.1.instanceTypes=m4.xlarge\ntitus.master.capacityManagement.tiers.1.buffer=0.3\n\ntitus.master.job.security.groups.default.list=\nDEFAULT_SG\n\nmantis.master.framework.name=TitusFramework\n\n\n\n\n\n\n\nStart server with \n./opt/titus-server-master/bin/titus-server-master -p ~/titus.properties | tee ~/titus.log\n\n\n\n\nGateway\n\n\nRun as root\n\n\n\n\ninstall java8\n\n\nsudo apt-get update\n\n\nsudo apt-get install openjdk-8-jdk\n\n\nCopy \ntitus-server-gateway/build/distributions/titus-server-gateway_\nversion\n.deb\n to server\n\n\nRun \ndpkg -i titus-server-gateway_\nversion\n.deb\n to install the debian\n\n\n\n\nRun as Ubuntu user\n\n\n\n\nexport JAVA_OPTS=\u201d-Dtitus.gateway.masterIp=\nip\n -Dtitus.gateway.masterHttpPort=\nport\n\u201d\n\n\nStart server with \n./opt/titus-server-gateway/bin/titus-server-gateway | tee ~/titus.log", 
            "title": "Master and Gateway"
        }, 
        {
            "location": "/install/master/#master", 
            "text": "Run as root   install java8  sudo apt-get update  sudo apt-get install openjdk-8-jdk  install mesos  Copy  titus-server-master/build/distributions/titus-server-master version .deb  to server  Run  dpkg -i titus-server-master version .deb  to install the debian   Run as Ubuntu user   Create  ~/titus.properties  with the properties:   mantis.master.apiport=7100\nmantis.master.apiProxyPort=7001\nmantis.master.grpcServer.port=7104\n\nmantis.zookeeper.connectString= zookeeperIp \nmantis.zookeeper.root=/titus/main\n\nmesos.master.location= mesosMasterIp : mesosMasterPort \n\ntitus.master.capacityManagement.instanceTypes.0.name=DEFAULT\ntitus.master.capacityManagement.instanceTypes.0.minSize=1\n\n# Critical tier (0)\ntitus.master.capacityManagement.tiers.0.instanceTypes=m4.4xlarge\ntitus.master.capacityManagement.tiers.0.buffer=0.3\n\n# Flex tier (1)\ntitus.master.capacityManagement.tiers.1.instanceTypes=m4.xlarge\ntitus.master.capacityManagement.tiers.1.buffer=0.3\n\ntitus.master.job.security.groups.default.list= DEFAULT_SG \nmantis.master.framework.name=TitusFramework   Start server with  ./opt/titus-server-master/bin/titus-server-master -p ~/titus.properties | tee ~/titus.log", 
            "title": "Master"
        }, 
        {
            "location": "/install/master/#gateway", 
            "text": "Run as root   install java8  sudo apt-get update  sudo apt-get install openjdk-8-jdk  Copy  titus-server-gateway/build/distributions/titus-server-gateway_ version .deb  to server  Run  dpkg -i titus-server-gateway_ version .deb  to install the debian   Run as Ubuntu user   export JAVA_OPTS=\u201d-Dtitus.gateway.masterIp= ip  -Dtitus.gateway.masterHttpPort= port \u201d  Start server with  ./opt/titus-server-gateway/bin/titus-server-gateway | tee ~/titus.log", 
            "title": "Gateway"
        }, 
        {
            "location": "/install/agent/", 
            "text": "Creating a Titus agent launch configuration and ASG\n\n\nWhen Spinnaker creates agent deployments, it creates the following user data in the launch config for an ASG. The\nagent processes depend on these being right.\n\n\nNETFLIX_ACCOUNT=\ntest\n\nNETFLIX_ACCOUNT_TYPE=\nmain\n\nNETFLIX_ENVIRONMENT=\ntest\n\nNETFLIX_APP=\ntitusagent\n\nNETFLIX_APPUSER=\ntitusagent\n\nNETFLIX_STACK=\nmainvpc\n\nNETFLIX_CLUSTER=\ntitusagent-mainvpc-m4.4xlarge.2\n\nNETFLIX_DETAIL=\nm4.4xlarge.2\n\nNETFLIX_AUTO_SCALE_GROUP=\ntitusagent-mainvpc-m4.4xlarge.2-v004\n\nNETFLIX_LAUNCH_CONFIG=\ntitusagent-mainvpc-m4.4xlarge.2-v004-07202017195940\n\nEC2_REGION=\neu-west-1\n\n\n\n\n\nUpgrade Ubuntu\n\n\nsudo su\napt-get update\napt-get upgrade\napt-get dist-upgrade\nshutdown -r now\n\n\n\n\nInstall Docker\n\n\nInstall docker as instructed \nhere\n\n- Update \n/etc/default/docker/daemon.json\n to include \n{\"iptables\": false}\n and restart the Docker daemon.\n\n\nMesos-slave\n\n\nRan mesos-slave with Docker image instead of installing natively.\n- TODO - need to do this without Docker\n- \ndocker run --rm --name mesosslave -v /apps/:/apps/ -v /etc/titus-executor/:/etc/titus-executor/ -v /var/run/docker.sock:/var/run/docker.sock --privileged --net=host -d mesosphere/mesos-slave:1.0.1-2.0.93.ubuntu1404 mesos-slave --master=zk://172.31.43.195:2181/titus/mainvpc/mesos --log_dir=/var/log/mesos/ --work_dir=/apps/mesos --logging_level=INFO --resources=\"network:1000\" --attributes=\"region:hackday;asg:titusagent-m4.xlarge;stack:hackday;zone:hackdayd;itype:m4.xlarge;cluster:titusagent-hackday;id:l-deadbeef;res:ResourceSet-ENIs-7-29\"\n\n\ntitus-executor\n\n\n\n\ndpkg -i titus-agent_0.0.1-1_all.deb\n\n\n\n\ntitus-vpc-driver\n\n\n\n\ndpkg -i --force-overwrite titus-vpc-driver_0.0.1-1_all.deb\n\n\nWe use \n--force-overwrite\n flag to ensure all files are updated.\n\n\nSetup networking so that interface names use the legacy \neth\n prefix convention.\n\n\nAdd \nnet.ifnames=0\n to GRUB_CMDLINE_LINUX= in \n/etc/default/grub\n and then run \nsudo update-grub\n.\n\n\nRemove the \n/etc/udev/rules.d/70-persistent-net.rules\n file and then run \nsudo reboot\n.\n\n\nAfter reboot, the default interface should be named \neth0\n instead of the previous \nens3\n.\n\n\nRun \nsudo /apps/titus-vpc-driver/bin/run\n to start the driver. Since all of the other\ncomponents are in the host network, it should be fine to run it from the host.\n\n\n\n\ntitus-metadata-service\n\n\n\n\ndpkg -i titus-metadata-service_0.0.1-1_all.deb\n\n\nRun \nsudo /apps/titus-metadata-service/bin/run\n to start the proxy", 
            "title": "Agent"
        }, 
        {
            "location": "/install/agent/#creating-a-titus-agent-launch-configuration-and-asg", 
            "text": "When Spinnaker creates agent deployments, it creates the following user data in the launch config for an ASG. The\nagent processes depend on these being right.  NETFLIX_ACCOUNT= test \nNETFLIX_ACCOUNT_TYPE= main \nNETFLIX_ENVIRONMENT= test \nNETFLIX_APP= titusagent \nNETFLIX_APPUSER= titusagent \nNETFLIX_STACK= mainvpc \nNETFLIX_CLUSTER= titusagent-mainvpc-m4.4xlarge.2 \nNETFLIX_DETAIL= m4.4xlarge.2 \nNETFLIX_AUTO_SCALE_GROUP= titusagent-mainvpc-m4.4xlarge.2-v004 \nNETFLIX_LAUNCH_CONFIG= titusagent-mainvpc-m4.4xlarge.2-v004-07202017195940 \nEC2_REGION= eu-west-1", 
            "title": "Creating a Titus agent launch configuration and ASG"
        }, 
        {
            "location": "/install/agent/#upgrade-ubuntu", 
            "text": "sudo su\napt-get update\napt-get upgrade\napt-get dist-upgrade\nshutdown -r now", 
            "title": "Upgrade Ubuntu"
        }, 
        {
            "location": "/install/agent/#install-docker", 
            "text": "Install docker as instructed  here \n- Update  /etc/default/docker/daemon.json  to include  {\"iptables\": false}  and restart the Docker daemon.", 
            "title": "Install Docker"
        }, 
        {
            "location": "/install/agent/#mesos-slave", 
            "text": "Ran mesos-slave with Docker image instead of installing natively.\n- TODO - need to do this without Docker\n-  docker run --rm --name mesosslave -v /apps/:/apps/ -v /etc/titus-executor/:/etc/titus-executor/ -v /var/run/docker.sock:/var/run/docker.sock --privileged --net=host -d mesosphere/mesos-slave:1.0.1-2.0.93.ubuntu1404 mesos-slave --master=zk://172.31.43.195:2181/titus/mainvpc/mesos --log_dir=/var/log/mesos/ --work_dir=/apps/mesos --logging_level=INFO --resources=\"network:1000\" --attributes=\"region:hackday;asg:titusagent-m4.xlarge;stack:hackday;zone:hackdayd;itype:m4.xlarge;cluster:titusagent-hackday;id:l-deadbeef;res:ResourceSet-ENIs-7-29\"", 
            "title": "Mesos-slave"
        }, 
        {
            "location": "/install/agent/#titus-executor", 
            "text": "dpkg -i titus-agent_0.0.1-1_all.deb", 
            "title": "titus-executor"
        }, 
        {
            "location": "/install/agent/#titus-vpc-driver", 
            "text": "dpkg -i --force-overwrite titus-vpc-driver_0.0.1-1_all.deb  We use  --force-overwrite  flag to ensure all files are updated.  Setup networking so that interface names use the legacy  eth  prefix convention.  Add  net.ifnames=0  to GRUB_CMDLINE_LINUX= in  /etc/default/grub  and then run  sudo update-grub .  Remove the  /etc/udev/rules.d/70-persistent-net.rules  file and then run  sudo reboot .  After reboot, the default interface should be named  eth0  instead of the previous  ens3 .  Run  sudo /apps/titus-vpc-driver/bin/run  to start the driver. Since all of the other\ncomponents are in the host network, it should be fine to run it from the host.", 
            "title": "titus-vpc-driver"
        }, 
        {
            "location": "/install/agent/#titus-metadata-service", 
            "text": "dpkg -i titus-metadata-service_0.0.1-1_all.deb  Run  sudo /apps/titus-metadata-service/bin/run  to start the proxy", 
            "title": "titus-metadata-service"
        }, 
        {
            "location": "/test/batch/", 
            "text": "To send requests, curl jobs to the gateway node\n\n\nTesting the most basic job\n\n\ncurl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' -d '{\n   \napplicationName\n: \nubuntu\n,\n   \nversion\n: \nlatest\n,\n   \ntype\n: \nbatch\n,\n   \nentryPoint\n: \nsleep 10\n,\n   \ninstances\n: 1,\n   \ncpu\n: 1,\n   \nmemory\n: 1024,\n   \ndisk\n: 1000,\n   \nnetworkMbps\n: 128\n }' 'http://localhost:7001/api/v2/jobs'\n\n\n\n\nTesting the most basic job\n\n\ncurl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' -d '{\n   \napplicationName\n: \nubuntu\n,\n   \nversion\n: \nlatest\n,\n   \ntype\n: \nbatch\n,\n   \nentryPoint\n: \nsleep 10\n,\n   \ninstances\n: 1,\n   \ncpu\n: 1,\n   \nmemory\n: 1024,\n   \ndisk\n: 1000,\n   \nnetworkMbps\n: 128,\n   \niamProfile\n: \narn:aws:iam::ACCOUNTID:role/IAMPROFILENAME\n \n }' 'http://localhost:7001/api/v2/jobs'\n\n\n\n\nTesting the metadataservice without executor or VPC driver\n\n\nThere is a a testing flag you can add to the metadata-service run command \nexport ALLOW_REMOTE_IP_OVERRIDE=true\n\nwhich will allow you to override the connection IP used to lookup the container doing a metadata request. If you\nstart two containers with the below labels:\n\n\nsudo docker run -d \\\n  --label TITUS_TASK_INSTANCE_ID=abf580cb-740b-4ab0-a46a-ebb5d590dbfe \\\n  --label ec2.iam.role=arn:aws:iam::ACCOUNTID:role/titusappwiths3InstanceProfile \\\n  --label titus.net.ipv4=1.1.1.1 \\\n  --label titus.task_id=Titus-15125145-worker-0-52 \\\n  --label titus.vpc.ipv4=1.1.1.1 \\\n  ubuntu:latest sleep 1000000\n\nsudo docker run -d \\\n  --label TITUS_TASK_INSTANCE_ID=abf580cb-740b-4ab0-a46a-ebb5d590dbfe \\\n  --label ec2.iam.role=arn:aws:iam::ACCOUNTID:role/titusappnos3InstanceProfile \\\n  --label titus.net.ipv4=1.1.1.2 \\\n  --label titus.task_id=Titus-15125145-worker-0-52 \\\n  --label titus.vpc.ipv4=1.1.1.2 \\\n  ubuntu:latest sleep 1000000\n\n\n\n\nYou can test the IAM support by running curl with a special header:\n\n\ncurl --header \nremote-ip:1.1.1.1\n http://10.11.10.11:9999/latest/meta-data/iam/security-credentials/titusappwiths3InstanceProfile\n\ncurl --header \nremote-ip:1.1.1.2\n http://10.11.10.11:9999/latest/meta-data/iam/security-credentials/titusappnos3InstanceProfile", 
            "title": "Basic batch task"
        }, 
        {
            "location": "/test/batch/#testing-the-most-basic-job", 
            "text": "curl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' -d '{\n    applicationName :  ubuntu ,\n    version :  latest ,\n    type :  batch ,\n    entryPoint :  sleep 10 ,\n    instances : 1,\n    cpu : 1,\n    memory : 1024,\n    disk : 1000,\n    networkMbps : 128\n }' 'http://localhost:7001/api/v2/jobs'", 
            "title": "Testing the most basic job"
        }, 
        {
            "location": "/test/batch/#testing-the-most-basic-job_1", 
            "text": "curl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' -d '{\n    applicationName :  ubuntu ,\n    version :  latest ,\n    type :  batch ,\n    entryPoint :  sleep 10 ,\n    instances : 1,\n    cpu : 1,\n    memory : 1024,\n    disk : 1000,\n    networkMbps : 128,\n    iamProfile :  arn:aws:iam::ACCOUNTID:role/IAMPROFILENAME  \n }' 'http://localhost:7001/api/v2/jobs'", 
            "title": "Testing the most basic job"
        }, 
        {
            "location": "/test/batch/#testing-the-metadataservice-without-executor-or-vpc-driver", 
            "text": "There is a a testing flag you can add to the metadata-service run command  export ALLOW_REMOTE_IP_OVERRIDE=true \nwhich will allow you to override the connection IP used to lookup the container doing a metadata request. If you\nstart two containers with the below labels:  sudo docker run -d \\\n  --label TITUS_TASK_INSTANCE_ID=abf580cb-740b-4ab0-a46a-ebb5d590dbfe \\\n  --label ec2.iam.role=arn:aws:iam::ACCOUNTID:role/titusappwiths3InstanceProfile \\\n  --label titus.net.ipv4=1.1.1.1 \\\n  --label titus.task_id=Titus-15125145-worker-0-52 \\\n  --label titus.vpc.ipv4=1.1.1.1 \\\n  ubuntu:latest sleep 1000000\n\nsudo docker run -d \\\n  --label TITUS_TASK_INSTANCE_ID=abf580cb-740b-4ab0-a46a-ebb5d590dbfe \\\n  --label ec2.iam.role=arn:aws:iam::ACCOUNTID:role/titusappnos3InstanceProfile \\\n  --label titus.net.ipv4=1.1.1.2 \\\n  --label titus.task_id=Titus-15125145-worker-0-52 \\\n  --label titus.vpc.ipv4=1.1.1.2 \\\n  ubuntu:latest sleep 1000000  You can test the IAM support by running curl with a special header:  curl --header  remote-ip:1.1.1.1  http://10.11.10.11:9999/latest/meta-data/iam/security-credentials/titusappwiths3InstanceProfile\n\ncurl --header  remote-ip:1.1.1.2  http://10.11.10.11:9999/latest/meta-data/iam/security-credentials/titusappnos3InstanceProfile", 
            "title": "Testing the metadataservice without executor or VPC driver"
        }, 
        {
            "location": "/faq/", 
            "text": "", 
            "title": "FAQ"
        }
    ]
}