{
    "docs": [
        {
            "location": "/", 
            "text": "Titus", 
            "title": "Introduction"
        }, 
        {
            "location": "/#titus", 
            "text": "", 
            "title": "Titus"
        }, 
        {
            "location": "/build/", 
            "text": "", 
            "title": "Building the Code"
        }, 
        {
            "location": "/install/prereqs/", 
            "text": "Required\n\n\nLinux\n\n\nWe currently run our agents on Ubuntu Xenial (16.04.2) with kernel 4.9.34 with\npatches for EFS. Until Titus open source supports EFS, it is likely that Xenial\nand a 4.9 kernel is sufficient.\n\n\nWe run all other tiers of Titus on Trusty.\n\n\nMesos and Zookeeper\n\n\n\n\nZookeeper 3.4.8 (with Exhibitor 1.5.5)\n\n\nMesos 1.0.1\n\n\n\n\nSpinnaker\n\n\nWe deploy Titus via Spinnaker to an EC2 cloud provider. Eventually we may\nrelease these pipelines, but for now we suggest direct deployments using\nthe AWS EC2 console.\n\n\nDocker Registry\n\n\nWe operate a docker registry based on Docker Distribution. We have tested with\nDockerhub and suggest this or the EC2 Container Registry Service (ECR).\n\n\nAWS Configuration\n\n\n\n\nIAM Role and security group for Titus\n\n\nTODO: specify what is required, for now tested with wide open security group\n  and \n*\n IAM role. \n\n\nIAM Role and security group for app container\n\n\nTODO: Need to specify a test sec group and IAM role\n\n\n\n\nOptional\n\n\nWe use Cassandra as our persistence store for Titus master. For OSS, we\ncurrent suggest the in-memory store.\n\n\nWe have integration with Eureka to disable agents and monitor health. For now,\nthis is not part of the OSS implementation.\n\n\nWe write all task state updates to Elastic Search for operational insight. For\nnow, this is not part of the OSS implementation.\n\n\nWe use Edda to understand which ASG's are available in Titus. For now, this is\nnot part of the OSS implementation.", 
            "title": "Prereqs"
        }, 
        {
            "location": "/install/prereqs/#required", 
            "text": "", 
            "title": "Required"
        }, 
        {
            "location": "/install/prereqs/#linux", 
            "text": "We currently run our agents on Ubuntu Xenial (16.04.2) with kernel 4.9.34 with\npatches for EFS. Until Titus open source supports EFS, it is likely that Xenial\nand a 4.9 kernel is sufficient.  We run all other tiers of Titus on Trusty.", 
            "title": "Linux"
        }, 
        {
            "location": "/install/prereqs/#mesos-and-zookeeper", 
            "text": "Zookeeper 3.4.8 (with Exhibitor 1.5.5)  Mesos 1.0.1", 
            "title": "Mesos and Zookeeper"
        }, 
        {
            "location": "/install/prereqs/#spinnaker", 
            "text": "We deploy Titus via Spinnaker to an EC2 cloud provider. Eventually we may\nrelease these pipelines, but for now we suggest direct deployments using\nthe AWS EC2 console.", 
            "title": "Spinnaker"
        }, 
        {
            "location": "/install/prereqs/#docker-registry", 
            "text": "We operate a docker registry based on Docker Distribution. We have tested with\nDockerhub and suggest this or the EC2 Container Registry Service (ECR).", 
            "title": "Docker Registry"
        }, 
        {
            "location": "/install/prereqs/#aws-configuration", 
            "text": "IAM Role and security group for Titus  TODO: specify what is required, for now tested with wide open security group\n  and  *  IAM role.   IAM Role and security group for app container  TODO: Need to specify a test sec group and IAM role", 
            "title": "AWS Configuration"
        }, 
        {
            "location": "/install/prereqs/#optional", 
            "text": "We use Cassandra as our persistence store for Titus master. For OSS, we\ncurrent suggest the in-memory store.  We have integration with Eureka to disable agents and monitor health. For now,\nthis is not part of the OSS implementation.  We write all task state updates to Elastic Search for operational insight. For\nnow, this is not part of the OSS implementation.  We use Edda to understand which ASG's are available in Titus. For now, this is\nnot part of the OSS implementation.", 
            "title": "Optional"
        }, 
        {
            "location": "/install/master/", 
            "text": "Master\n\n\nGateway\n\n\nRun as root\n\n\n\n\ninstall java8\n\n\nsudo apt-get update\n\n\nsudo apt-get install openjdk-8-jdk\n\n\nCopy titus-server-gateway/build/distribute/titus-server-gateway_\n.deb to server\n\n\nRun \ndpkg -i titus-server-gateway_\nversion\n.deb\n\n\n\n\nRun as Ubuntu user\n\n\n\n\nexport JAVA_OPTS=\u201d-Dtitus.gateway.masterIp=\nip\n -Dtitus.gateway.masterHttpPort=\nport\n\u201d\n\n\nStart server with \n./opt/titus-server-gateway/bin/titus-server-gateway | tee ~/titus.log", 
            "title": "Scheduler and Gateway"
        }, 
        {
            "location": "/install/master/#master", 
            "text": "", 
            "title": "Master"
        }, 
        {
            "location": "/install/master/#gateway", 
            "text": "Run as root   install java8  sudo apt-get update  sudo apt-get install openjdk-8-jdk  Copy titus-server-gateway/build/distribute/titus-server-gateway_ .deb to server  Run  dpkg -i titus-server-gateway_ version .deb   Run as Ubuntu user   export JAVA_OPTS=\u201d-Dtitus.gateway.masterIp= ip  -Dtitus.gateway.masterHttpPort= port \u201d  Start server with  ./opt/titus-server-gateway/bin/titus-server-gateway | tee ~/titus.log", 
            "title": "Gateway"
        }, 
        {
            "location": "/install/agent/", 
            "text": "Mesos-slave\n\n\nRan mesos-slave with Docker image instead of installing natively.\n- TODO - need to do this without Docker\n- \ndocker run --rm --name mesosslave -v /apps/:/apps/ -v /etc/titus-executor/:/etc/titus-executor/ -v /var/run/docker.sock:/var/run/docker.sock --privileged --net=host -d mesosphere/mesos-slave:1.0.1-2.0.93.ubuntu1404 mesos-slave --master=zk://172.31.43.195:2181/titus/mainvpc/mesos --log_dir=/var/log/mesos/ --work_dir=/apps/mesos --logging_level=INFO --resources=\"network:1000\" --attributes=\"region:hackday;asg:titusagent-m4.xlarge;stack:hackday;zone:hackdayd;itype:m4.xlarge;cluster:titusagent-hackday;id:l-deadbeef;res:ResourceSet-ENIs-7-29\"\n\n\ntitus-executor\n\n\n\n\nChange registry URL in config.test.json to \u201cregistry.hub.docker.com/library\u201d\n\n\nThis allows simple Dockerhub images to be used for testing.\n\n\n\n\ntitus-vpc-driver\n\n\n\n\nCreated a hackday_environment.sh that populates env vars based on the stock values (e.g., NFLX_ACCOUNT)\n\n\nHard coded values from the host being used (e.g., EC2_INSTANCE_ID or EC2_ENI_ID).\n\n\nChanged the \u201crun\u201d script to source this file instead of nflx_environment.sh.\n\n\nTODO: Convert from the stash snippet\n\n\nOnes that matter: export TITUS_REGISTRY=\"registry.hub.docker.com\", \n\n\nSet env var TITUS_REGISTRY to export TITUS_REGISTRY=\"registry.hub.docker.com\"\n\n\nChanged the pause image to use to imageName = \"kubernetes/pause:latest\"", 
            "title": "Agent"
        }, 
        {
            "location": "/install/agent/#mesos-slave", 
            "text": "Ran mesos-slave with Docker image instead of installing natively.\n- TODO - need to do this without Docker\n-  docker run --rm --name mesosslave -v /apps/:/apps/ -v /etc/titus-executor/:/etc/titus-executor/ -v /var/run/docker.sock:/var/run/docker.sock --privileged --net=host -d mesosphere/mesos-slave:1.0.1-2.0.93.ubuntu1404 mesos-slave --master=zk://172.31.43.195:2181/titus/mainvpc/mesos --log_dir=/var/log/mesos/ --work_dir=/apps/mesos --logging_level=INFO --resources=\"network:1000\" --attributes=\"region:hackday;asg:titusagent-m4.xlarge;stack:hackday;zone:hackdayd;itype:m4.xlarge;cluster:titusagent-hackday;id:l-deadbeef;res:ResourceSet-ENIs-7-29\"", 
            "title": "Mesos-slave"
        }, 
        {
            "location": "/install/agent/#titus-executor", 
            "text": "Change registry URL in config.test.json to \u201cregistry.hub.docker.com/library\u201d  This allows simple Dockerhub images to be used for testing.", 
            "title": "titus-executor"
        }, 
        {
            "location": "/install/agent/#titus-vpc-driver", 
            "text": "Created a hackday_environment.sh that populates env vars based on the stock values (e.g., NFLX_ACCOUNT)  Hard coded values from the host being used (e.g., EC2_INSTANCE_ID or EC2_ENI_ID).  Changed the \u201crun\u201d script to source this file instead of nflx_environment.sh.  TODO: Convert from the stash snippet  Ones that matter: export TITUS_REGISTRY=\"registry.hub.docker.com\",   Set env var TITUS_REGISTRY to export TITUS_REGISTRY=\"registry.hub.docker.com\"  Changed the pause image to use to imageName = \"kubernetes/pause:latest\"", 
            "title": "titus-vpc-driver"
        }, 
        {
            "location": "/faq/", 
            "text": "", 
            "title": "FAQ"
        }
    ]
}