{
    "docs": [
        {
            "location": "/", 
            "text": "Titus\n\n\nTitus is the Netflix Cloud Container Runtime that manages containers and provides integrations to the infrastructure ecosystem.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#titus", 
            "text": "Titus is the Netflix Cloud Container Runtime that manages containers and provides integrations to the infrastructure ecosystem.", 
            "title": "Titus"
        }, 
        {
            "location": "/build/", 
            "text": "Agent\n\n\nmkdir -p $GOPATH/src/github.com/Netflix\ncd $GOPATH/src/github.com/Netflix\ngit clone https://github.com/Netflix/titus-agent.git\ncd titus-agent\nmake build\n./gradlew clean buildDeb\n\n\n\n\nVPC Driver\n\n\nmkdir -p $GOPATH/src/github.com/Netflix\ncd $GOPATH/src/github.com/Netflix\ngit clone https://github.com/Netflix/titus-vpc-driver.git\ncd titus-vpc-driver\ngo build\n./gradlew clean buildDeb\n\n\n\n\nMetadata Service\n\n\nmkdir -p $GOPATH/src/github.com/Netflix\ncd $GOPATH/src/github.com/Netflix\ngit clone https://github.com/Netflix/titus-metadata-service.git\ncd titus-metadata-service\nmake build\n./gradlew clean buildDeb\n\n\n\n\nTitus Api Definitions\n\n\ngit clone https://github.com/Netflix/titus-api-definitions.git\ncd titus-api-definitions\n./gradlew clean build\n\n\n\n\nTitus Master\n\n\ngit clone https://github.com/Netflix/titus-control-plane.git\ncd titus-control-plane\n./gradlew clean buildDeb -PidlLocal\n\n\n\n\nTitus Gateway\n\n\ngit clone https://github.com/Netflix/titus-control-plane.git\ncd titus-control-plane\n./gradlew clean buildDeb -PidlLocal\n\n\n\n\nNote:\n the \ntitus-api-definitions\n git repo must be in the same root folder as \ntitus-control-plane\n git repo in order to build the master and gateway components with \n-PidlLocal\n.\nRunning all builds will produce 5 debs under the build/distributions folder in each component.", 
            "title": "Building the Code"
        }, 
        {
            "location": "/build/#agent", 
            "text": "mkdir -p $GOPATH/src/github.com/Netflix\ncd $GOPATH/src/github.com/Netflix\ngit clone https://github.com/Netflix/titus-agent.git\ncd titus-agent\nmake build\n./gradlew clean buildDeb", 
            "title": "Agent"
        }, 
        {
            "location": "/build/#vpc-driver", 
            "text": "mkdir -p $GOPATH/src/github.com/Netflix\ncd $GOPATH/src/github.com/Netflix\ngit clone https://github.com/Netflix/titus-vpc-driver.git\ncd titus-vpc-driver\ngo build\n./gradlew clean buildDeb", 
            "title": "VPC Driver"
        }, 
        {
            "location": "/build/#metadata-service", 
            "text": "mkdir -p $GOPATH/src/github.com/Netflix\ncd $GOPATH/src/github.com/Netflix\ngit clone https://github.com/Netflix/titus-metadata-service.git\ncd titus-metadata-service\nmake build\n./gradlew clean buildDeb", 
            "title": "Metadata Service"
        }, 
        {
            "location": "/build/#titus-api-definitions", 
            "text": "git clone https://github.com/Netflix/titus-api-definitions.git\ncd titus-api-definitions\n./gradlew clean build", 
            "title": "Titus Api Definitions"
        }, 
        {
            "location": "/build/#titus-master", 
            "text": "git clone https://github.com/Netflix/titus-control-plane.git\ncd titus-control-plane\n./gradlew clean buildDeb -PidlLocal", 
            "title": "Titus Master"
        }, 
        {
            "location": "/build/#titus-gateway", 
            "text": "git clone https://github.com/Netflix/titus-control-plane.git\ncd titus-control-plane\n./gradlew clean buildDeb -PidlLocal  Note:  the  titus-api-definitions  git repo must be in the same root folder as  titus-control-plane  git repo in order to build the master and gateway components with  -PidlLocal .\nRunning all builds will produce 5 debs under the build/distributions folder in each component.", 
            "title": "Titus Gateway"
        }, 
        {
            "location": "/install/prereqs/", 
            "text": "Required\n\n\nLinux\n\n\nWe currently run our agents on Ubuntu Xenial (16.04.2) with kernel 4.9.34 with\npatches for EFS. Until Titus open source supports EFS, it is likely that Xenial\nand a 4.9 kernel is sufficient.\n\n\nWe run all other tiers of Titus on Trusty.\n\n\nMesos and Zookeeper\n\n\n\n\nZookeeper 3.4.8 (with Exhibitor 1.5.5)\n\n\nMesos 1.0.1\n\n\n\n\nWe run a high availability configuration of Mesos and Zookeeper. You can run this\non a node using Docker in a non-production mode by using:\n\n\nsudo docker run -d -p 2181:2181 --name zookeeper jplock/zookeeper:3.4.10\nsudo docker run -d -p 5050:5050 --net=host --name mesomaster mesosphere/mesos-master:1.0.1-2.0.93.ubuntu1404 mesos-master --zk=zk://localhost:2181/titus/mainvpc/mesos --work_dir=/tmp/master --log_dir=/var/log/mesos --logging_level=INFO --quorum=1\n\n\n\n\nYou can see the key ports for these are 2181 (Zookeeper) and 5050 (Mesos).\n\n\nSpinnaker\n\n\nWe deploy Titus via Spinnaker to an EC2 cloud provider. Eventually we may\nrelease these pipelines, but for now we suggest direct deployments using\nthe AWS EC2 console.\n\n\nDocker Registry\n\n\nWe operate a docker registry based on Docker Distribution. We have tested with\nDockerhub and suggest this or the EC2 Container Registry Service (ECR).\n\n\nAWS Configuration\n\n\nIAM Role and security group for Titus are \ndocumented\n.\n\n\nOptional\n\n\nWe use Cassandra as our persistence store for Titus master. For OSS, we\ncurrent suggest the in-memory store.\n\n\nWe have integration with Eureka to disable agents and monitor health. For now,\nthis is not part of the OSS implementation.\n\n\nWe write all task state updates to Elastic Search for operational insight. For\nnow, this is not part of the OSS implementation.\n\n\nWe use Edda to understand which ASG's are available in Titus. For now, this is\nnot part of the OSS implementation.", 
            "title": "Prereqs"
        }, 
        {
            "location": "/install/prereqs/#required", 
            "text": "", 
            "title": "Required"
        }, 
        {
            "location": "/install/prereqs/#linux", 
            "text": "We currently run our agents on Ubuntu Xenial (16.04.2) with kernel 4.9.34 with\npatches for EFS. Until Titus open source supports EFS, it is likely that Xenial\nand a 4.9 kernel is sufficient.  We run all other tiers of Titus on Trusty.", 
            "title": "Linux"
        }, 
        {
            "location": "/install/prereqs/#mesos-and-zookeeper", 
            "text": "Zookeeper 3.4.8 (with Exhibitor 1.5.5)  Mesos 1.0.1   We run a high availability configuration of Mesos and Zookeeper. You can run this\non a node using Docker in a non-production mode by using:  sudo docker run -d -p 2181:2181 --name zookeeper jplock/zookeeper:3.4.10\nsudo docker run -d -p 5050:5050 --net=host --name mesomaster mesosphere/mesos-master:1.0.1-2.0.93.ubuntu1404 mesos-master --zk=zk://localhost:2181/titus/mainvpc/mesos --work_dir=/tmp/master --log_dir=/var/log/mesos --logging_level=INFO --quorum=1  You can see the key ports for these are 2181 (Zookeeper) and 5050 (Mesos).", 
            "title": "Mesos and Zookeeper"
        }, 
        {
            "location": "/install/prereqs/#spinnaker", 
            "text": "We deploy Titus via Spinnaker to an EC2 cloud provider. Eventually we may\nrelease these pipelines, but for now we suggest direct deployments using\nthe AWS EC2 console.", 
            "title": "Spinnaker"
        }, 
        {
            "location": "/install/prereqs/#docker-registry", 
            "text": "We operate a docker registry based on Docker Distribution. We have tested with\nDockerhub and suggest this or the EC2 Container Registry Service (ECR).", 
            "title": "Docker Registry"
        }, 
        {
            "location": "/install/prereqs/#aws-configuration", 
            "text": "IAM Role and security group for Titus are  documented .", 
            "title": "AWS Configuration"
        }, 
        {
            "location": "/install/prereqs/#optional", 
            "text": "We use Cassandra as our persistence store for Titus master. For OSS, we\ncurrent suggest the in-memory store.  We have integration with Eureka to disable agents and monitor health. For now,\nthis is not part of the OSS implementation.  We write all task state updates to Elastic Search for operational insight. For\nnow, this is not part of the OSS implementation.  We use Edda to understand which ASG's are available in Titus. For now, this is\nnot part of the OSS implementation.", 
            "title": "Optional"
        }, 
        {
            "location": "/install/prereqs-amazon/", 
            "text": "Creating security groups\n\n\nTwo security groups are needed. We are naming them \ntitusapp\n and \ntitusmaster-mainvpc\n:\n\n\n\n\nInfrastructure security group\n\n\nThis is for the \ntitusmaster-mainvpc\n security group\n\n\nFor inbound\n- From titusmaster-mainvpc security group, ALL TCP, All ICMP\n- From anywhere (including Internet), SSH\n\n\n\n\nFor outbound\n- All traffic\n\n\n\n\nApp security group\n\n\nThis is for the \ntitusapp\n \n\n\nFor inbound and outbound\n- Up to your application needs\n\n\nCreating IAM Roles\n\n\nThree IAM roles are needed. We are naming them `titusmasterInstanceProfile' and 'titusappwiths3InstanceProfile'\nand 'titusappnos3InstanceProfile'.\n\n\n\n\nInfrastructure IAM Role\n\n\nFor now, we are using a wide open IAM role. We can refine this later.\n\n\n\n\nApp IAM Roles\n\n\nYou need to allow this IAM Role to be assumed into via the Infrastructure Role. You can do this by setting\nup trusted relationships. It should look like this:\n\n\n\n\nThe Trust relationship should look like:\n\n\n{\n  \nVersion\n: \n2012-10-17\n,\n  \nStatement\n: [\n    {\n      \nEffect\n: \nAllow\n,\n      \nPrincipal\n: {\n        \nService\n: \nec2.amazonaws.com\n\n      },\n      \nAction\n: \nsts:AssumeRole\n\n    },\n    {\n      \nEffect\n: \nAllow\n,\n      \nPrincipal\n: {\n        \nAWS\n: \narn:aws:iam::ACCOUNTID:role/titusmasterInstanceProfile\n\n      },\n      \nAction\n: \nsts:AssumeRole\n\n    }\n  ]\n}\n\n\n\n\nFor permissions, pick two sets of permissions that matter to your apps. We created one with S3 read access\nand one without to be able to test the IAM role support feature.", 
            "title": "Amazon Prereqs"
        }, 
        {
            "location": "/install/prereqs-amazon/#creating-security-groups", 
            "text": "Two security groups are needed. We are naming them  titusapp  and  titusmaster-mainvpc :", 
            "title": "Creating security groups"
        }, 
        {
            "location": "/install/prereqs-amazon/#infrastructure-security-group", 
            "text": "This is for the  titusmaster-mainvpc  security group  For inbound\n- From titusmaster-mainvpc security group, ALL TCP, All ICMP\n- From anywhere (including Internet), SSH   For outbound\n- All traffic", 
            "title": "Infrastructure security group"
        }, 
        {
            "location": "/install/prereqs-amazon/#app-security-group", 
            "text": "This is for the  titusapp    For inbound and outbound\n- Up to your application needs", 
            "title": "App security group"
        }, 
        {
            "location": "/install/prereqs-amazon/#creating-iam-roles", 
            "text": "Three IAM roles are needed. We are naming them `titusmasterInstanceProfile' and 'titusappwiths3InstanceProfile'\nand 'titusappnos3InstanceProfile'.", 
            "title": "Creating IAM Roles"
        }, 
        {
            "location": "/install/prereqs-amazon/#infrastructure-iam-role", 
            "text": "For now, we are using a wide open IAM role. We can refine this later.", 
            "title": "Infrastructure IAM Role"
        }, 
        {
            "location": "/install/prereqs-amazon/#app-iam-roles", 
            "text": "You need to allow this IAM Role to be assumed into via the Infrastructure Role. You can do this by setting\nup trusted relationships. It should look like this:   The Trust relationship should look like:  {\n   Version :  2012-10-17 ,\n   Statement : [\n    {\n       Effect :  Allow ,\n       Principal : {\n         Service :  ec2.amazonaws.com \n      },\n       Action :  sts:AssumeRole \n    },\n    {\n       Effect :  Allow ,\n       Principal : {\n         AWS :  arn:aws:iam::ACCOUNTID:role/titusmasterInstanceProfile \n      },\n       Action :  sts:AssumeRole \n    }\n  ]\n}  For permissions, pick two sets of permissions that matter to your apps. We created one with S3 read access\nand one without to be able to test the IAM role support feature.", 
            "title": "App IAM Roles"
        }, 
        {
            "location": "/install/master/", 
            "text": "Master\n\n\nRun as ubuntu user\n\n\n\n\nadd titus apt repo with \ncurl -s https://8095c452e9473a3fae3ea86a6f2572c2cde0d7b5ec63e84f:@packagecloud.io/install/repositories/netflix/titus/script.deb.sh | sudo bash\n\n\nupdate apt repos with \nsudo apt-get update\n\n\ninstall java8 with \nsudo apt-get install openjdk-8-jdk\n\n\ninstall mesos with \nsudo apt-get install mesos\n\n\nCopy \ntitus-server-master/build/distributions/titus-server-master\nversion\n.deb\n to server\n\n\n\n\nRun \nsudo dpkg -i titus-server-master\nversion\n.deb\n to install the debian\n\n\n\n\n\n\nCreate \n~/titusmaster.properties\n with the properties:\n\n\n\n\n\n\ntitus.master.apiport=7001\ntitus.master.apiProxyPort=7001\ntitus.master.grpcServer.port=7104\n\ntitus.zookeeper.connectString=\nZK_IP\n:\nZK_PORT\n\ntitus.zookeeper.root=/titus/main\n\nmesos.master.location=\nMESOS_MASTER_IP\n:\nMESOS_MASTER_PORT\n\n\ntitus.agent.fullCacheRefreshIntervalMs=10000\ntitus.agent.agentServerGroupPattern=.*\n\ntitusMaster.job.configuration.defaultIamRole=\nDEFAULT_IAM_ROLE_ARN\n\ntitusMaster.job.configuration.defaultSecurityGroups=\nSECURITY_GROUP_ID\n\n\nmesos.titus.executor=/apps/titus-executor/bin/titus-executor\n\n\n\n\n\n\nStart server with \nsudo /opt/titus-server-master/bin/titus-server-master -p ~/titusmaster.properties | tee ~/titusmaster.log\n\n\n\n\nGateway\n\n\nRun as ubuntu user\n\n\n\n\nupdate apt repos with \nsudo apt-get update\n\n\n\n\ninstall java8 with \nsudo apt-get install openjdk-8-jdk\n\n\n\n\n\n\nCopy \ntitus-server-gateway/build/distributions/titus-server-gateway\nversion\n.deb\n to server\n\n\n\n\n\n\nRun \nsudo dpkg -i titus-server-gateway\nversion\n.deb\n to install the debian\n\n\n\n\n\n\nCreate \n~/titusgateway.properties\n with the properties:\n\n\n\n\n\n\ntitus.gateway.masterIp=\nMASTER_IP\n\ntitus.gateway.masterHttpPort=\nMASTER_PORT\n\n\n\n\n\n\n\nStart server with \nsudo /opt/titus-server-gateway/bin/titus-server-gateway -p ~/titusgateway.properties | tee ~/titusgateway.log", 
            "title": "Master and Gateway"
        }, 
        {
            "location": "/install/master/#master", 
            "text": "Run as ubuntu user   add titus apt repo with  curl -s https://8095c452e9473a3fae3ea86a6f2572c2cde0d7b5ec63e84f:@packagecloud.io/install/repositories/netflix/titus/script.deb.sh | sudo bash  update apt repos with  sudo apt-get update  install java8 with  sudo apt-get install openjdk-8-jdk  install mesos with  sudo apt-get install mesos  Copy  titus-server-master/build/distributions/titus-server-master version .deb  to server   Run  sudo dpkg -i titus-server-master version .deb  to install the debian    Create  ~/titusmaster.properties  with the properties:    titus.master.apiport=7001\ntitus.master.apiProxyPort=7001\ntitus.master.grpcServer.port=7104\n\ntitus.zookeeper.connectString= ZK_IP : ZK_PORT \ntitus.zookeeper.root=/titus/main\n\nmesos.master.location= MESOS_MASTER_IP : MESOS_MASTER_PORT \n\ntitus.agent.fullCacheRefreshIntervalMs=10000\ntitus.agent.agentServerGroupPattern=.*\n\ntitusMaster.job.configuration.defaultIamRole= DEFAULT_IAM_ROLE_ARN \ntitusMaster.job.configuration.defaultSecurityGroups= SECURITY_GROUP_ID \n\nmesos.titus.executor=/apps/titus-executor/bin/titus-executor   Start server with  sudo /opt/titus-server-master/bin/titus-server-master -p ~/titusmaster.properties | tee ~/titusmaster.log", 
            "title": "Master"
        }, 
        {
            "location": "/install/master/#gateway", 
            "text": "Run as ubuntu user   update apt repos with  sudo apt-get update   install java8 with  sudo apt-get install openjdk-8-jdk    Copy  titus-server-gateway/build/distributions/titus-server-gateway version .deb  to server    Run  sudo dpkg -i titus-server-gateway version .deb  to install the debian    Create  ~/titusgateway.properties  with the properties:    titus.gateway.masterIp= MASTER_IP \ntitus.gateway.masterHttpPort= MASTER_PORT    Start server with  sudo /opt/titus-server-gateway/bin/titus-server-gateway -p ~/titusgateway.properties | tee ~/titusgateway.log", 
            "title": "Gateway"
        }, 
        {
            "location": "/install/agent/", 
            "text": "Launch agents in internal VPC subnets\n\n\nCurrently Titus only sets up private IP's for containers. Therefore, it will not work properly if you launch\nagents in external VPC's. While it will launch containers, the public IP will not have network access.\n\n\nCreating a Titus agent launch configuration and ASG\n\n\nWhen Spinnaker creates agent deployments, it creates the following user data in the launch config for an ASG. The\nagent processes depend on these being right.\n\n\nNETFLIX_ACCOUNT=\ntest\n\nNETFLIX_ACCOUNT_TYPE=\nmain\n\nNETFLIX_ENVIRONMENT=\ntest\n\nNETFLIX_APP=\ntitusagent\n\nNETFLIX_APPUSER=\ntitusagent\n\nNETFLIX_STACK=\nmainvpc\n\nNETFLIX_CLUSTER=\ntitusagent-mainvpc-m4.4xlarge.2\n\nNETFLIX_DETAIL=\nm4.4xlarge.2\n\nNETFLIX_AUTO_SCALE_GROUP=\ntitusagent-mainvpc-m4.4xlarge.2-v004\n\nNETFLIX_LAUNCH_CONFIG=\ntitusagent-mainvpc-m4.4xlarge.2-v004-07202017195940\n\nEC2_REGION=\neu-west-1\n\n\n\n\n\nUpgrade Ubuntu\n\n\nNO NOT UPGRADE UBUNTU\n - This seems to be be breaking the vpc driver currently.\n\n\nsudo su\napt-get update\napt-get upgrade\napt-get dist-upgrade\nshutdown -r now\n\n\n\n\nInstall Docker\n\n\nInstall docker as instructed \nhere\n\n\n\n\nAdd the current user to docker group \nsudo gpasswd -a $USER docker\n, log out and then log back in.\n\n\nUpdate \n/etc/docker/daemon.json\n to include \n{\"iptables\": false}\n and restart the instance.\n\n\nInstead of restarting the instance, you can also restart just the Docker daemon and update the IP tables with \nsudo iptables -A FORWARD -j ACCEPT\n\n\n\n\n\n\n\n\nMesos-slave\n\n\nWe run mesos-slave through startup scripts. To make running Titus easier, you can run via a Docker image instead.\n\n\n\n\ndocker run --rm --name mesosslave -v /apps/:/apps/ -v /etc/titus-executor/:/etc/titus-executor/ -v /var/run/docker.sock:/var/run/docker.sock --privileged --net=host -d mesosphere/mesos-slave:1.0.1-2.0.93.ubuntu1404 mesos-slave --master=zk://172.31.43.195:2181/titus/mainvpc/mesos --log_dir=/var/log/mesos/ --work_dir=/apps/mesos --logging_level=INFO --resources=\"network:1000\" --attributes=\"region:hackday;asg:titusagent-m4.xlarge;stack:hackday;zone:hackdayd;itype:m4.xlarge;cluster:titusagent-hackday;id:l-deadbeef;res:ResourceSet-ENIs-7-29\"\n\n\nTODO\n: integrate gen_env.sh \n\n\n\n\n\n\n\n\ntitus-executor\n\n\n\n\ndpkg -i titus-agent_0.0.1-1_all.deb\n\n\n\n\ntitus-vpc-driver\n\n\n\n\ndpkg -i --force-overwrite titus-vpc-driver_0.0.1-1_all.deb\n\n\nWe use \n--force-overwrite\n flag to ensure all files are updated.\n\n\n\n\n\n\nSetup networking so that interface names use the legacy \neth\n prefix convention.\n\n\nAdd \nnet.ifnames=0\n to GRUB_CMDLINE_LINUX= in \n/etc/default/grub\n and then run \nsudo update-grub\n.\n\n\nRemove the \n/etc/udev/rules.d/70-persistent-net.rules\n file and then run \nsudo reboot\n.\n\n\nAfter reboot, the default interface should be named \neth0\n instead of the previous \nens3\n.\n\n\n\n\n\n\nRun \nsudo /apps/titus-vpc-driver/bin/run\n to start the driver. Since all of the other\n  components are in the host network, it should be fine to run it from the host.\n\n\n\n\ntitus-metadata-service\n\n\n\n\ndpkg -i titus-metadata-service_0.0.1-1_all.deb\n\n\nRun \nsudo /apps/titus-metadata-service/bin/run\n to start the proxy", 
            "title": "Agent"
        }, 
        {
            "location": "/install/agent/#launch-agents-in-internal-vpc-subnets", 
            "text": "Currently Titus only sets up private IP's for containers. Therefore, it will not work properly if you launch\nagents in external VPC's. While it will launch containers, the public IP will not have network access.", 
            "title": "Launch agents in internal VPC subnets"
        }, 
        {
            "location": "/install/agent/#creating-a-titus-agent-launch-configuration-and-asg", 
            "text": "When Spinnaker creates agent deployments, it creates the following user data in the launch config for an ASG. The\nagent processes depend on these being right.  NETFLIX_ACCOUNT= test \nNETFLIX_ACCOUNT_TYPE= main \nNETFLIX_ENVIRONMENT= test \nNETFLIX_APP= titusagent \nNETFLIX_APPUSER= titusagent \nNETFLIX_STACK= mainvpc \nNETFLIX_CLUSTER= titusagent-mainvpc-m4.4xlarge.2 \nNETFLIX_DETAIL= m4.4xlarge.2 \nNETFLIX_AUTO_SCALE_GROUP= titusagent-mainvpc-m4.4xlarge.2-v004 \nNETFLIX_LAUNCH_CONFIG= titusagent-mainvpc-m4.4xlarge.2-v004-07202017195940 \nEC2_REGION= eu-west-1", 
            "title": "Creating a Titus agent launch configuration and ASG"
        }, 
        {
            "location": "/install/agent/#upgrade-ubuntu", 
            "text": "NO NOT UPGRADE UBUNTU  - This seems to be be breaking the vpc driver currently.  sudo su\napt-get update\napt-get upgrade\napt-get dist-upgrade\nshutdown -r now", 
            "title": "Upgrade Ubuntu"
        }, 
        {
            "location": "/install/agent/#install-docker", 
            "text": "Install docker as instructed  here   Add the current user to docker group  sudo gpasswd -a $USER docker , log out and then log back in.  Update  /etc/docker/daemon.json  to include  {\"iptables\": false}  and restart the instance.  Instead of restarting the instance, you can also restart just the Docker daemon and update the IP tables with  sudo iptables -A FORWARD -j ACCEPT", 
            "title": "Install Docker"
        }, 
        {
            "location": "/install/agent/#mesos-slave", 
            "text": "We run mesos-slave through startup scripts. To make running Titus easier, you can run via a Docker image instead.   docker run --rm --name mesosslave -v /apps/:/apps/ -v /etc/titus-executor/:/etc/titus-executor/ -v /var/run/docker.sock:/var/run/docker.sock --privileged --net=host -d mesosphere/mesos-slave:1.0.1-2.0.93.ubuntu1404 mesos-slave --master=zk://172.31.43.195:2181/titus/mainvpc/mesos --log_dir=/var/log/mesos/ --work_dir=/apps/mesos --logging_level=INFO --resources=\"network:1000\" --attributes=\"region:hackday;asg:titusagent-m4.xlarge;stack:hackday;zone:hackdayd;itype:m4.xlarge;cluster:titusagent-hackday;id:l-deadbeef;res:ResourceSet-ENIs-7-29\"  TODO : integrate gen_env.sh", 
            "title": "Mesos-slave"
        }, 
        {
            "location": "/install/agent/#titus-executor", 
            "text": "dpkg -i titus-agent_0.0.1-1_all.deb", 
            "title": "titus-executor"
        }, 
        {
            "location": "/install/agent/#titus-vpc-driver", 
            "text": "dpkg -i --force-overwrite titus-vpc-driver_0.0.1-1_all.deb  We use  --force-overwrite  flag to ensure all files are updated.    Setup networking so that interface names use the legacy  eth  prefix convention.  Add  net.ifnames=0  to GRUB_CMDLINE_LINUX= in  /etc/default/grub  and then run  sudo update-grub .  Remove the  /etc/udev/rules.d/70-persistent-net.rules  file and then run  sudo reboot .  After reboot, the default interface should be named  eth0  instead of the previous  ens3 .    Run  sudo /apps/titus-vpc-driver/bin/run  to start the driver. Since all of the other\n  components are in the host network, it should be fine to run it from the host.", 
            "title": "titus-vpc-driver"
        }, 
        {
            "location": "/install/agent/#titus-metadata-service", 
            "text": "dpkg -i titus-metadata-service_0.0.1-1_all.deb  Run  sudo /apps/titus-metadata-service/bin/run  to start the proxy", 
            "title": "titus-metadata-service"
        }, 
        {
            "location": "/test/batch/", 
            "text": "To send requests, curl jobs to the gateway node\n\n\nTesting the most basic job\n\n\ncurl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' -d '{\n   \napplicationName\n: \nlibrary/ubuntu\n,\n   \nversion\n: \nlatest\n,\n   \ntype\n: \nbatch\n,\n   \nentryPoint\n: \nsleep 10\n,\n   \ninstances\n: 1,\n   \ncpu\n: 1,\n   \nmemory\n: 1024,\n   \ndisk\n: 1000,\n   \nnetworkMbps\n: 128\n }' 'http://GATEWAYIP:7001/api/v2/jobs'\n\n\n\n\nTesting with IAM Roles\n\n\ncurl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' -d '{\n   \napplicationName\n: \nlibrary/ubuntu\n,\n   \nversion\n: \nlatest\n,\n   \ntype\n: \nbatch\n,\n   \nentryPoint\n: \nsleep 10\n,\n   \ninstances\n: 1,\n   \ncpu\n: 1,\n   \nmemory\n: 1024,\n   \ndisk\n: 1000,\n   \nnetworkMbps\n: 128,\n   \niamProfile\n: \narn:aws:iam::ACCOUNTID:role/IAMPROFILENAME\n \n }' 'http://GATEWAYIP:7001/api/v2/jobs'\n\n\n\n\nTesting with security groups and routable IP's\n\n\ncurl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' -d '{\n   \napplicationName\n: \nlibrary/ubuntu\n,\n   \nversion\n: \nlatest\n,\n   \ntype\n: \nbatch\n,\n   \nentryPoint\n: \nsleep 10\n,\n   \ninstances\n: 1,\n   \ncpu\n: 1,\n   \nmemory\n: 1024,\n   \ndisk\n: 1000,\n   \nnetworkMbps\n: 128,\n   \nallocateIpAddress\n: true,\n   \nsecurityGroups\n: [\nsg-34b11b52\n]\n}' 'http://GATEWAYIP:7001/api/v2/jobs'\n\n\n\n\nTesting the metadataservice without executor or VPC driver\n\n\nThere is a a testing flag you can add to the metadata-service run command \nexport ALLOW_REMOTE_IP_OVERRIDE=true\n\nwhich will allow you to override the connection IP used to lookup the container doing a metadata request. If you\nstart two containers with the below labels:\n\n\nsudo docker run -d \\\n  --label TITUS_TASK_INSTANCE_ID=abf580cb-740b-4ab0-a46a-ebb5d590dbfe \\\n  --label ec2.iam.role=arn:aws:iam::ACCOUNTID:role/titusappwiths3InstanceProfile \\\n  --label titus.net.ipv4=1.1.1.1 \\\n  --label titus.task_id=Titus-15125145-worker-0-52 \\\n  --label titus.vpc.ipv4=1.1.1.1 \\\n  ubuntu:latest sleep 1000000\n\nsudo docker run -d \\\n  --label TITUS_TASK_INSTANCE_ID=abf580cb-740b-4ab0-a46a-ebb5d590dbfe \\\n  --label ec2.iam.role=arn:aws:iam::ACCOUNTID:role/titusappnos3InstanceProfile \\\n  --label titus.net.ipv4=1.1.1.2 \\\n  --label titus.task_id=Titus-15125145-worker-0-52 \\\n  --label titus.vpc.ipv4=1.1.1.2 \\\n  ubuntu:latest sleep 1000000\n\n\n\n\nYou can test the IAM support by running curl with a special header:\n\n\ncurl --header \nremote-ip:1.1.1.1\n http://10.11.10.11:9999/latest/meta-data/iam/security-credentials/titusappwiths3InstanceProfile\n\ncurl --header \nremote-ip:1.1.1.2\n http://10.11.10.11:9999/latest/meta-data/iam/security-credentials/titusappnos3InstanceProfile\n\n\n\n\nDebugging Mesos\n\n\n\n\nIPOFMESOS:5050\n\n\nIPOFMESOS:5050/slaves", 
            "title": "Basic batch task"
        }, 
        {
            "location": "/test/batch/#testing-the-most-basic-job", 
            "text": "curl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' -d '{\n    applicationName :  library/ubuntu ,\n    version :  latest ,\n    type :  batch ,\n    entryPoint :  sleep 10 ,\n    instances : 1,\n    cpu : 1,\n    memory : 1024,\n    disk : 1000,\n    networkMbps : 128\n }' 'http://GATEWAYIP:7001/api/v2/jobs'", 
            "title": "Testing the most basic job"
        }, 
        {
            "location": "/test/batch/#testing-with-iam-roles", 
            "text": "curl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' -d '{\n    applicationName :  library/ubuntu ,\n    version :  latest ,\n    type :  batch ,\n    entryPoint :  sleep 10 ,\n    instances : 1,\n    cpu : 1,\n    memory : 1024,\n    disk : 1000,\n    networkMbps : 128,\n    iamProfile :  arn:aws:iam::ACCOUNTID:role/IAMPROFILENAME  \n }' 'http://GATEWAYIP:7001/api/v2/jobs'", 
            "title": "Testing with IAM Roles"
        }, 
        {
            "location": "/test/batch/#testing-with-security-groups-and-routable-ips", 
            "text": "curl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' -d '{\n    applicationName :  library/ubuntu ,\n    version :  latest ,\n    type :  batch ,\n    entryPoint :  sleep 10 ,\n    instances : 1,\n    cpu : 1,\n    memory : 1024,\n    disk : 1000,\n    networkMbps : 128,\n    allocateIpAddress : true,\n    securityGroups : [ sg-34b11b52 ]\n}' 'http://GATEWAYIP:7001/api/v2/jobs'", 
            "title": "Testing with security groups and routable IP's"
        }, 
        {
            "location": "/test/batch/#testing-the-metadataservice-without-executor-or-vpc-driver", 
            "text": "There is a a testing flag you can add to the metadata-service run command  export ALLOW_REMOTE_IP_OVERRIDE=true \nwhich will allow you to override the connection IP used to lookup the container doing a metadata request. If you\nstart two containers with the below labels:  sudo docker run -d \\\n  --label TITUS_TASK_INSTANCE_ID=abf580cb-740b-4ab0-a46a-ebb5d590dbfe \\\n  --label ec2.iam.role=arn:aws:iam::ACCOUNTID:role/titusappwiths3InstanceProfile \\\n  --label titus.net.ipv4=1.1.1.1 \\\n  --label titus.task_id=Titus-15125145-worker-0-52 \\\n  --label titus.vpc.ipv4=1.1.1.1 \\\n  ubuntu:latest sleep 1000000\n\nsudo docker run -d \\\n  --label TITUS_TASK_INSTANCE_ID=abf580cb-740b-4ab0-a46a-ebb5d590dbfe \\\n  --label ec2.iam.role=arn:aws:iam::ACCOUNTID:role/titusappnos3InstanceProfile \\\n  --label titus.net.ipv4=1.1.1.2 \\\n  --label titus.task_id=Titus-15125145-worker-0-52 \\\n  --label titus.vpc.ipv4=1.1.1.2 \\\n  ubuntu:latest sleep 1000000  You can test the IAM support by running curl with a special header:  curl --header  remote-ip:1.1.1.1  http://10.11.10.11:9999/latest/meta-data/iam/security-credentials/titusappwiths3InstanceProfile\n\ncurl --header  remote-ip:1.1.1.2  http://10.11.10.11:9999/latest/meta-data/iam/security-credentials/titusappnos3InstanceProfile", 
            "title": "Testing the metadataservice without executor or VPC driver"
        }, 
        {
            "location": "/test/batch/#debugging-mesos", 
            "text": "IPOFMESOS:5050  IPOFMESOS:5050/slaves", 
            "title": "Debugging Mesos"
        }, 
        {
            "location": "/faq/", 
            "text": "", 
            "title": "FAQ"
        }
    ]
}